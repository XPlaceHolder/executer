// Code generated by "esc -pkg builtinmanifests -prefix  -ignore  -include  -o resources.go manifests"; DO NOT EDIT.

package builtinmanifests

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/manifests/small_php.yml": {
		name:    "small_php.yml",
		local:   "manifests/small_php.yml",
		size:    4155,
		modtime: 1541838679,
		compressed: `
H4sIAAAAAAAC/+xXWU/rTBJ9968owdtASBwggKX7ECBhC5ebhbCMRlbbrtid2N2mFxvn14+83Cwk3GU0
D98DQkLqOt1V3adOHUytVjOkG2BELEgaB6ZhIEtsRiK0YKZZqJkhUHItXLR9wXVcYVFWoSF3iaKcWYBE
Ki0NgxIiLSBzLRB2QQVUgksYOFjFuADJIwSuAhQQh0RNuIgMI4nKCtIyAGpQ1pnqKHb4uwEA4HLNlAVm
sZAzbcFQEeYR4dnnpiyiKovRgiQqFlzaseATGqJVrAGIF1G2/roSCCnT77bL2YT6WpQPqiAAKYPlAiDW
Tkhde4aZXA3nd96RMqgJSaDdbrfPD7/PyYWZuc1Osbztt9vtfqetZs3wsdU/e5lMg5fG7LabjR+d7t7R
tHE8Fg9v96/O6HqQZa3Z69n8qO4R1E/dbjget+713HG7keftHb3enIlu78nH9LDp+9d4/5pkD0rPyEXd
CYY3z20S8x+new/zqf/6ZuqsfxvJdlOY58FlffLWvjtO+v04ubq/lOL1BFNORxeM9fZGF+PhTTAIng9H
h/yem/Hp9Oqkl17djgbqpX392rk8uQvuO2dNdMXzVfe+IfRx/yx56/onwaEzPxqm7K5143ay073x+VRM
Hx7CGz45SV+G2GSPg87sRRDzx2zci5TzPpZP01Y0vzu7Pksm58PJaEJOur3OyDHT1u1A7T0+melTGlyR
+bWYTbnXn/cG8+8vd8/DfvN0VjfV0YtzXL/6ngQnl9302zcQktRmmNWaDbPVaDYbO6VQFBfEX0iARisL
AD6ZoLDg0dFM6SGKBIWx1mgZ5PgFYZxRl4RLUeT6M1sHjaNabzRchBMUspiGkCiUqopzaXtUzpZlI8KI
j14RtUvRLrTcGyzTucQNKPMtGCDxngRVuIQEEoU2j8vp6woe3eRvqzZ4RJEi/YpIa39c95eVN2p3olhl
K3CRXdI52r5jgdloLLDdarDzUUuQlVRpTb0Vp3CwiNQLM9gHOimW+8BZCUDKdejlfuIzFEShB0QWWYsy
DFXKxfLZNZDaYaiqsZcMVc1cXKjabUt0taAqWzM5KQObSd/4MPk0tkAqoqhrrDhVik5NFgKSf+tWUn4w
yiTKXTIHvozsy8i+jOzLyH5rZCEnnu2QkDAXRbVlPfbZXoe4M2SeTTxPoJR2zHlYJdgK/aF5puiUdriw
UMFDlNZPgqgELdEDxcHH8v2gAgQP45BnETIF0hU0VnLx/lW/O4iD2DAShmrtezFZslKytULfVt4EYT7m
vT0ofurNowXkE4UpyRagaRhrzK0V3sb1musXkW2EbtzwF6wHSEIV5H8NHNw4FygVl9By8gVX3OWhBddK
xbALpdJJCAkJdd6Nf4/ceL9Ay9/yP8vDXCgLTpeiF/imUSo7JiqwYKe+A7tFjAr0cnn/rJb3VqLKW1uU
5aJMfQAP+Td/SiXuA1X5NsYVkDDkKXoHHxslg09fM3LjD9dsNkuN6fATYnJke6bPaXn04n1oh+GSk4ng
TOXN2SDnZ9c+Bf5+vla7bW/02Ng+fmuq3BzCjUNbGStaUsuLrVBGeX7AguaKD3pUoFua5w1zuGbeAiKu
i1JaOX88/U0Pq/8wc+7saiJ3/rWzrIJSUVZ8zaztWWG5yrBgUuCEvn+eZfu+Ven9L4RJGWzhy/zH8FUN
yf+Hr/8GAAD//wuBLYA7EAAA
`,
	},

	"/manifests": {
		name:  "manifests",
		local: `manifests`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"manifests": {
		_escData["/manifests/small_php.yml"],
	},
}
