// Code generated by "esc -pkg builtinmanifests -prefix  -ignore  -include  -o resources.go manifests"; DO NOT EDIT.

package builtinmanifests

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/manifests/large_php.yml": {
		name:    "large_php.yml",
		local:   "manifests/large_php.yml",
		size:    3612,
		modtime: 1542007441,
		compressed: `
H4sIAAAAAAAC/+xWUYsbNxB+N/g/DHcvSbGd8xFK2be2tDQQKCQX+lDKopXGXvW0kqoZrc/59UWr9a18
tq/h6EMpwWDQfNJ80jfzabVcLuczki12ooL+ZrWez+YztH1tRYcV3Edrop3PApKLQWK9DS76Eez2B9g4
KVg7WwEK4kgpiRaCKhCfY0C4Bm41gRQWGhxjLgC5DsFxiwG8EbxxoUsr+y7TUDWfASwhs/0ZO9+4hxQC
kC5armCdR3QfK/jIwioRVP3DmnKY9x4r6Lsn9H2XuPuOaAEyhoCWzR6cNfsEaQKK3rvAqHIaR7UPbqMN
VjkAIFSn7ROJMmK0jQ+1dHajtzFkUQ4YAFFbjAB8bIyW9T3u6SieTv3qVWYhalfTvNevxyOzC2I77Uh3
5QjAbTYYKvjURMvxI4YewwQO6ahNE34U1lkthSk2mdRcf7u6ebt8f/dxivcYaKixEYzEB8BRrTTdF9yd
sGKLagjXuQiPxXn/ocgohWy13VbwAYX6LWjGAgsoGGvnc1/9HFz3Lp3xMEMJFgNDqdzyy7mfZz/h/6nz
vC/xgYD0Z6y3TQXrm5sJvB57NrVBjzaLFqNWRSM2OETeDI2+AL0ZhgtwNgOwc9Go1K5bi0EwKhA0ZM08
FnnnQnH4JVBsLPLYlWSRl+tpT+P8mlDGoHl/ZGSitra0fdIgsta+AmLBWiZbTlbcYbOkoafoBXb86qqv
rvqfuMo4oepGGGElhnHOcezi5EbIe7SqFkoFJKq9c2bMcBb6Ui/vsMnWnBwdnEGqDjJpgkiogB1sMasA
3CIo9MbtO7QMJIP2TJMIpSdXvvXDV9oiH3+h+0KdLFsp5HkFg7BbTJVeDb83t28nbCsYd2L/iA5vkyMV
j/nPKn90GeXQOX1Pd/pcFVoUhtt0gTV4urJl9hkrLofg2ElnKviF2cM1ZAsIA70wMZXn9zvpFwOa/+mP
YrULXMF3hRsC/hWRuPaC2wqu3lzB9RDTAVXq+wPf8J5BTtUeiF3IyVfwa3p37TThAjSnadYxCGPcDtXq
pGzUXj7RnfRPt3p7O7ZeNJcEStCFbJfl+aT8Ar43ptBmE5zlVKhTkQ4lvIy8wH1l7evTgs9n5+153Kpn
XHqy7Lx2Q4WWibEUT7u0pILb8sZUOqDMF+0727ho1YQJKZGoSlq63T8WdXz8Jx3r0bFX31wVTEis7fBd
PppUSj7meJQ14EY/PJPnwsSyI1+mHVF7Trr1f0u6g4P+Nenms14ELZqDMI+iHN5D5SttGP4dAAD//3aS
CoscDgAA
`,
	},

	"/manifests/maximum_php.yml": {
		name:    "maximum_php.yml",
		local:   "manifests/maximum_php.yml",
		size:    3612,
		modtime: 1542007438,
		compressed: `
H4sIAAAAAAAC/+xWUYsbNxB+N/g/DHcvSbGd8xFK2be2tDQQKCQX+lDKopXGXvW0kqoZrc/59UWr9a18
tq/h6EMpwWDQfNJ80jfzabVcLuczki12ooL+ZrWez+YztH1tRYcV3Edrop3PApKLQWK9DS76Eez2B9g4
KVg7WwEK4kgpiRaCKhCfY0C4Bm41gRQWGhxjLgC5DsFxiwG8EbxxoUsr+y7TUDWfASwhs/0ZO9+4hxQC
kC5armCdR3QfK/jIwioRVP3DmnKY9x4r6Lsn9H2XuPuOaAEyhoCWzR6cNfsEaQKK3rvAqHIaR7UPbqMN
VjkAIFSn7ROJMmK0jQ+1dHajtzFkUQ4YAFFbjAB8bIyW9T3u6SieTv3qVWYhalfTvNevxyOzC2I77Uh3
5QjAbTYYKvjURMvxI4YewwQO6ahNE34U1lkthSk2mdRcf7u6ebt8f/dxivcYaKixEYzEB8BRrTTdF9yd
sGKLagjXuQiPxXn/ocgohWy13VbwAYX6LWjGAgsoGGvnc1/9HFz3Lp3xMEMJFgNDqdzyy7mfZz/h/6nz
vC/xgYD0Z6y3TQXrm5sJvB57NrVBjzaLFqNWRSM2OETeDI2+AL0ZhgtwNgOwc9Go1K5bi0EwKhA0ZM08
FnnnQnH4JVBsLPLYlWSRl+tpT+P8mlDGoHl/ZGSitra0fdIgsta+AmLBWiZbTlbcYbOkoafoBXb86qqv
rvqfuMo4oepGGGElhnHOcezi5EbIe7SqFkoFJKq9c2bMcBb6Ui/vsMnWnBwdnEGqDjJpgkiogB1sMasA
3CIo9MbtO7QMJIP2TJMIpSdXvvXDV9oiH3+h+0KdLFsp5HkFg7BbTJVeDb83t28nbCsYd2L/iA5vkyMV
j/nPKn90GeXQOX1Pd/pcFVoUhtt0gTV4urJl9hkrLofg2ElnKviF2cM1ZAsIA70wMZXn9zvpFwOa/+mP
YrULXMF3hRsC/hWRuPaC2wqu3lzB9RDTAVXq+wPf8J5BTtUeiF3IyVfwa3p37TThAjSnadYxCGPcDtXq
pGzUXj7RnfRPt3p7O7ZeNJcEStCFbJfl+aT8Ar43ptBmE5zlVKhTkQ4lvIy8wH1l7evTgs9n5+153Kpn
XHqy7Lx2Q4WWibEUT7u0pILb8sZUOqDMF+0727ho1YQJKZGoSlq63T8WdXz8Jx3r0bFX31wVTEis7fBd
PppUSj7meJQ14EY/PJPnwsSyI1+mHVF7Trr1f0u6g4P+Nenms14ELZqDMI+iHN5D5SttGP4dAAD//3aS
CoscDgAA
`,
	},

	"/manifests/medium_php.yml": {
		name:    "medium_php.yml",
		local:   "manifests/medium_php.yml",
		size:    3612,
		modtime: 1542007434,
		compressed: `
H4sIAAAAAAAC/+xWUYsbNxB+N/g/DHcvSbGd8xFK2be2tDQQKCQX+lDKopXGXvW0kqoZrc/59UWr9a18
tq/h6EMpwWDQfNJ80jfzabVcLuczki12ooL+ZrWez+YztH1tRYcV3Edrop3PApKLQWK9DS76Eez2B9g4
KVg7WwEK4kgpiRaCKhCfY0C4Bm41gRQWGhxjLgC5DsFxiwG8EbxxoUsr+y7TUDWfASwhs/0ZO9+4hxQC
kC5armCdR3QfK/jIwioRVP3DmnKY9x4r6Lsn9H2XuPuOaAEyhoCWzR6cNfsEaQKK3rvAqHIaR7UPbqMN
VjkAIFSn7ROJMmK0jQ+1dHajtzFkUQ4YAFFbjAB8bIyW9T3u6SieTv3qVWYhalfTvNevxyOzC2I77Uh3
5QjAbTYYKvjURMvxI4YewwQO6ahNE34U1lkthSk2mdRcf7u6ebt8f/dxivcYaKixEYzEB8BRrTTdF9yd
sGKLagjXuQiPxXn/ocgohWy13VbwAYX6LWjGAgsoGGvnc1/9HFz3Lp3xMEMJFgNDqdzyy7mfZz/h/6nz
vC/xgYD0Z6y3TQXrm5sJvB57NrVBjzaLFqNWRSM2OETeDI2+AL0ZhgtwNgOwc9Go1K5bi0EwKhA0ZM08
FnnnQnH4JVBsLPLYlWSRl+tpT+P8mlDGoHl/ZGSitra0fdIgsta+AmLBWiZbTlbcYbOkoafoBXb86qqv
rvqfuMo4oepGGGElhnHOcezi5EbIe7SqFkoFJKq9c2bMcBb6Ui/vsMnWnBwdnEGqDjJpgkiogB1sMasA
3CIo9MbtO7QMJIP2TJMIpSdXvvXDV9oiH3+h+0KdLFsp5HkFg7BbTJVeDb83t28nbCsYd2L/iA5vkyMV
j/nPKn90GeXQOX1Pd/pcFVoUhtt0gTV4urJl9hkrLofg2ElnKviF2cM1ZAsIA70wMZXn9zvpFwOa/+mP
YrULXMF3hRsC/hWRuPaC2wqu3lzB9RDTAVXq+wPf8J5BTtUeiF3IyVfwa3p37TThAjSnadYxCGPcDtXq
pGzUXj7RnfRPt3p7O7ZeNJcEStCFbJfl+aT8Ar43ptBmE5zlVKhTkQ4lvIy8wH1l7evTgs9n5+153Kpn
XHqy7Lx2Q4WWibEUT7u0pILb8sZUOqDMF+0727ho1YQJKZGoSlq63T8WdXz8Jx3r0bFX31wVTEis7fBd
PppUSj7meJQ14EY/PJPnwsSyI1+mHVF7Trr1f0u6g4P+Nenms14ELZqDMI+iHN5D5SttGP4dAAD//3aS
CoscDgAA
`,
	},

	"/manifests/small_php.yml": {
		name:    "small_php.yml",
		local:   "manifests/small_php.yml",
		size:    3613,
		modtime: 1542007411,
		compressed: `
H4sIAAAAAAAC/+xWUYsbNxB+N/g/DHcvSbGd8xFK2be2tDQQKCQX+lDKopXGXvW0kqoZrc/59UWr9a18
tq/h6EMpwWDQfNJ80jfzabVcLuczki12ooL+ZrWez+YztH1tRYcV3Edrop3PApKLQWK9DS76Eez2B9g4
KVg7WwEK4kgpiRaCKhCfY0C4Bm41gRQWGhxjLgC5DsFxiwG8EbxxoUsr+y7TUDWfASwhs/0ZO9+4hxQC
kC5armCdR3QfK/jIwioRVP3DmnKY9x4r6Lsn9H2XuPuOaAEyhoCWzR6cNfsEaQKK3rvAqHIaR7UPbqMN
VjkAIFSn7ROJMmK0jQ+1dHajtzFkUQ4YAFFbjAB8bIyW9T3u6SieTv3qVWYhalfTvNevxyOzC2I77Uh3
5QjAbTYYKvjURMvxI4YewwQO6ahNE34U1lkthSk2mdRcf7u6ebt8f/dxivcYaKixEYzEB8BRrTTdF9yd
sGKLagjXuQiPxXn/ocgohWy13VbwAYX6LWjGAgsoGGvnc1/9HFz3Lp3xMEMJFgNDqdzyy7mfZz/h/6nz
vC/xgYD0Z6y3TQXrm5sJvB57NrVBjzaLFqNWRSM2OETeDI2+AL0ZhgtwNgOwc9Go1K5bi0EwKhA0ZM08
FnnnQnH4JVBsLPLYlWSRl+tpT+P8mlDGoHl/ZGSitra0fdIgsta+AmLBWiZbTlbcYbOkoafoJXb8aquv
tvqf2Mo4oepGGGElhnHOcezi5EbIe7SqFkoFJKq9c2bMcBb6UjPvsMnenCwdnEGqDjJpgkiogB1sMasA
3CIo9MbtO7QMJIP2TJMIpSdXvvXDZ9oiH3+i+0KdLFsp5HkFg7BbTJVeDb83t28nbCsYd2L/iA6PkyMV
j/nPKn90G+XQOX1Pd/pcFVoUhtt0gTV4urJl9hkrLofg2ElnKviF2cM1ZAsIA70wMZXn9zvpFwOa/+mP
YrULXMF3hRsC/hWRuPaC2wqu3lzB9RDTAVXq+wPf8KBBTtUeiF3IyVfwa3p47TThAjSnadYxCGPcDtXq
pGzUXj7RnfRPt3p7O7ZeNJcEStCFbJfl+aT8Ar43ptBmE5zlVKhTkQ4lvIy8wH1l7evTgs9n5+153Kpn
XHqy7Lx2Q4WWibEUT7u0pILb8sZUOqDMF+0727ho1YQJKZGoSlq63T8WdXz9Jx3r0bFX31wVTEis7fBd
PppUSj7meJQ14EY/PJPnwsSyI1+mHVF7Trr1f0u6g4P+Nenms14ELZqDMI+iHN5D5TNtGP4dAAD//3dE
L1wdDgAA
`,
	},

	"/manifests": {
		name:  "manifests",
		local: `manifests`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"manifests": {
		_escData["/manifests/large_php.yml"],
		_escData["/manifests/maximum_php.yml"],
		_escData["/manifests/medium_php.yml"],
		_escData["/manifests/small_php.yml"],
	},
}
